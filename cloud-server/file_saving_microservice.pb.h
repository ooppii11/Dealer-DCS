// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_saving_microservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fsaving_5fmicroservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fsaving_5fmicroservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fsaving_5fmicroservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fsaving_5fmicroservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fsaving_5fmicroservice_2eproto;
class DeleteFileRequest;
class DeleteFileRequestDefaultTypeInternal;
extern DeleteFileRequestDefaultTypeInternal _DeleteFileRequest_default_instance_;
class DeleteFileResponse;
class DeleteFileResponseDefaultTypeInternal;
extern DeleteFileResponseDefaultTypeInternal _DeleteFileResponse_default_instance_;
class DownloadFileRequest;
class DownloadFileRequestDefaultTypeInternal;
extern DownloadFileRequestDefaultTypeInternal _DownloadFileRequest_default_instance_;
class DownloadFileResponse;
class DownloadFileResponseDefaultTypeInternal;
extern DownloadFileResponseDefaultTypeInternal _DownloadFileResponse_default_instance_;
class UploadFileRequest;
class UploadFileRequestDefaultTypeInternal;
extern UploadFileRequestDefaultTypeInternal _UploadFileRequest_default_instance_;
class UploadFileResponse;
class UploadFileResponseDefaultTypeInternal;
extern UploadFileResponseDefaultTypeInternal _UploadFileResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DeleteFileRequest* Arena::CreateMaybeMessage<::DeleteFileRequest>(Arena*);
template<> ::DeleteFileResponse* Arena::CreateMaybeMessage<::DeleteFileResponse>(Arena*);
template<> ::DownloadFileRequest* Arena::CreateMaybeMessage<::DownloadFileRequest>(Arena*);
template<> ::DownloadFileResponse* Arena::CreateMaybeMessage<::DownloadFileResponse>(Arena*);
template<> ::UploadFileRequest* Arena::CreateMaybeMessage<::UploadFileRequest>(Arena*);
template<> ::UploadFileResponse* Arena::CreateMaybeMessage<::UploadFileResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UploadFileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UploadFileRequest) */ {
 public:
  inline UploadFileRequest() : UploadFileRequest(nullptr) {}
  virtual ~UploadFileRequest();

  UploadFileRequest(const UploadFileRequest& from);
  UploadFileRequest(UploadFileRequest&& from) noexcept
    : UploadFileRequest() {
    *this = ::std::move(from);
  }

  inline UploadFileRequest& operator=(const UploadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileRequest& operator=(UploadFileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadFileRequest& default_instance();

  static inline const UploadFileRequest* internal_default_instance() {
    return reinterpret_cast<const UploadFileRequest*>(
               &_UploadFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadFileRequest& a, UploadFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadFileRequest* New() const final {
    return CreateMaybeMessage<UploadFileRequest>(nullptr);
  }

  UploadFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadFileRequest& from);
  void MergeFrom(const UploadFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UploadFileRequest";
  }
  protected:
  explicit UploadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fsaving_5fmicroservice_2eproto);
    return ::descriptor_table_file_5fsaving_5fmicroservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kFileDataFieldNumber = 3,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes file_data = 3;
  void clear_file_data();
  const std::string& file_data() const;
  void set_file_data(const std::string& value);
  void set_file_data(std::string&& value);
  void set_file_data(const char* value);
  void set_file_data(const void* value, size_t size);
  std::string* mutable_file_data();
  std::string* release_file_data();
  void set_allocated_file_data(std::string* file_data);
  private:
  const std::string& _internal_file_data() const;
  void _internal_set_file_data(const std::string& value);
  std::string* _internal_mutable_file_data();
  public:

  // @@protoc_insertion_point(class_scope:UploadFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fsaving_5fmicroservice_2eproto;
};
// -------------------------------------------------------------------

class UploadFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UploadFileResponse) */ {
 public:
  inline UploadFileResponse() : UploadFileResponse(nullptr) {}
  virtual ~UploadFileResponse();

  UploadFileResponse(const UploadFileResponse& from);
  UploadFileResponse(UploadFileResponse&& from) noexcept
    : UploadFileResponse() {
    *this = ::std::move(from);
  }

  inline UploadFileResponse& operator=(const UploadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileResponse& operator=(UploadFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadFileResponse& default_instance();

  static inline const UploadFileResponse* internal_default_instance() {
    return reinterpret_cast<const UploadFileResponse*>(
               &_UploadFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadFileResponse& a, UploadFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadFileResponse* New() const final {
    return CreateMaybeMessage<UploadFileResponse>(nullptr);
  }

  UploadFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadFileResponse& from);
  void MergeFrom(const UploadFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UploadFileResponse";
  }
  protected:
  explicit UploadFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fsaving_5fmicroservice_2eproto);
    return ::descriptor_table_file_5fsaving_5fmicroservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:UploadFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fsaving_5fmicroservice_2eproto;
};
// -------------------------------------------------------------------

class DownloadFileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DownloadFileRequest) */ {
 public:
  inline DownloadFileRequest() : DownloadFileRequest(nullptr) {}
  virtual ~DownloadFileRequest();

  DownloadFileRequest(const DownloadFileRequest& from);
  DownloadFileRequest(DownloadFileRequest&& from) noexcept
    : DownloadFileRequest() {
    *this = ::std::move(from);
  }

  inline DownloadFileRequest& operator=(const DownloadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadFileRequest& operator=(DownloadFileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadFileRequest& default_instance();

  static inline const DownloadFileRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadFileRequest*>(
               &_DownloadFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DownloadFileRequest& a, DownloadFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadFileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadFileRequest* New() const final {
    return CreateMaybeMessage<DownloadFileRequest>(nullptr);
  }

  DownloadFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadFileRequest& from);
  void MergeFrom(const DownloadFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DownloadFileRequest";
  }
  protected:
  explicit DownloadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fsaving_5fmicroservice_2eproto);
    return ::descriptor_table_file_5fsaving_5fmicroservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:DownloadFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fsaving_5fmicroservice_2eproto;
};
// -------------------------------------------------------------------

class DownloadFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DownloadFileResponse) */ {
 public:
  inline DownloadFileResponse() : DownloadFileResponse(nullptr) {}
  virtual ~DownloadFileResponse();

  DownloadFileResponse(const DownloadFileResponse& from);
  DownloadFileResponse(DownloadFileResponse&& from) noexcept
    : DownloadFileResponse() {
    *this = ::std::move(from);
  }

  inline DownloadFileResponse& operator=(const DownloadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadFileResponse& operator=(DownloadFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadFileResponse& default_instance();

  static inline const DownloadFileResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadFileResponse*>(
               &_DownloadFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DownloadFileResponse& a, DownloadFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadFileResponse* New() const final {
    return CreateMaybeMessage<DownloadFileResponse>(nullptr);
  }

  DownloadFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadFileResponse& from);
  void MergeFrom(const DownloadFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DownloadFileResponse";
  }
  protected:
  explicit DownloadFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fsaving_5fmicroservice_2eproto);
    return ::descriptor_table_file_5fsaving_5fmicroservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDataFieldNumber = 1,
  };
  // bytes file_data = 1;
  void clear_file_data();
  const std::string& file_data() const;
  void set_file_data(const std::string& value);
  void set_file_data(std::string&& value);
  void set_file_data(const char* value);
  void set_file_data(const void* value, size_t size);
  std::string* mutable_file_data();
  std::string* release_file_data();
  void set_allocated_file_data(std::string* file_data);
  private:
  const std::string& _internal_file_data() const;
  void _internal_set_file_data(const std::string& value);
  std::string* _internal_mutable_file_data();
  public:

  // @@protoc_insertion_point(class_scope:DownloadFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fsaving_5fmicroservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteFileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteFileRequest) */ {
 public:
  inline DeleteFileRequest() : DeleteFileRequest(nullptr) {}
  virtual ~DeleteFileRequest();

  DeleteFileRequest(const DeleteFileRequest& from);
  DeleteFileRequest(DeleteFileRequest&& from) noexcept
    : DeleteFileRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFileRequest& operator=(const DeleteFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFileRequest& operator=(DeleteFileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteFileRequest& default_instance();

  static inline const DeleteFileRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFileRequest*>(
               &_DeleteFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteFileRequest& a, DeleteFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteFileRequest* New() const final {
    return CreateMaybeMessage<DeleteFileRequest>(nullptr);
  }

  DeleteFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteFileRequest& from);
  void MergeFrom(const DeleteFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteFileRequest";
  }
  protected:
  explicit DeleteFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fsaving_5fmicroservice_2eproto);
    return ::descriptor_table_file_5fsaving_5fmicroservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:DeleteFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fsaving_5fmicroservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteFileResponse) */ {
 public:
  inline DeleteFileResponse() : DeleteFileResponse(nullptr) {}
  virtual ~DeleteFileResponse();

  DeleteFileResponse(const DeleteFileResponse& from);
  DeleteFileResponse(DeleteFileResponse&& from) noexcept
    : DeleteFileResponse() {
    *this = ::std::move(from);
  }

  inline DeleteFileResponse& operator=(const DeleteFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFileResponse& operator=(DeleteFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteFileResponse& default_instance();

  static inline const DeleteFileResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteFileResponse*>(
               &_DeleteFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteFileResponse& a, DeleteFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteFileResponse* New() const final {
    return CreateMaybeMessage<DeleteFileResponse>(nullptr);
  }

  DeleteFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteFileResponse& from);
  void MergeFrom(const DeleteFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteFileResponse";
  }
  protected:
  explicit DeleteFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fsaving_5fmicroservice_2eproto);
    return ::descriptor_table_file_5fsaving_5fmicroservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DeleteFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fsaving_5fmicroservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadFileRequest

// string file_name = 1;
inline void UploadFileRequest::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& UploadFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:UploadFileRequest.file_name)
  return _internal_file_name();
}
inline void UploadFileRequest::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:UploadFileRequest.file_name)
}
inline std::string* UploadFileRequest::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:UploadFileRequest.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& UploadFileRequest::_internal_file_name() const {
  return file_name_.Get();
}
inline void UploadFileRequest::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadFileRequest::set_file_name(std::string&& value) {
  
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UploadFileRequest.file_name)
}
inline void UploadFileRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UploadFileRequest.file_name)
}
inline void UploadFileRequest::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UploadFileRequest.file_name)
}
inline std::string* UploadFileRequest::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:UploadFileRequest.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadFileRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UploadFileRequest.file_name)
}

// string type = 2;
inline void UploadFileRequest::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& UploadFileRequest::type() const {
  // @@protoc_insertion_point(field_get:UploadFileRequest.type)
  return _internal_type();
}
inline void UploadFileRequest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:UploadFileRequest.type)
}
inline std::string* UploadFileRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:UploadFileRequest.type)
  return _internal_mutable_type();
}
inline const std::string& UploadFileRequest::_internal_type() const {
  return type_.Get();
}
inline void UploadFileRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadFileRequest::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UploadFileRequest.type)
}
inline void UploadFileRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UploadFileRequest.type)
}
inline void UploadFileRequest::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UploadFileRequest.type)
}
inline std::string* UploadFileRequest::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadFileRequest::release_type() {
  // @@protoc_insertion_point(field_release:UploadFileRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadFileRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UploadFileRequest.type)
}

// bytes file_data = 3;
inline void UploadFileRequest::clear_file_data() {
  file_data_.ClearToEmpty();
}
inline const std::string& UploadFileRequest::file_data() const {
  // @@protoc_insertion_point(field_get:UploadFileRequest.file_data)
  return _internal_file_data();
}
inline void UploadFileRequest::set_file_data(const std::string& value) {
  _internal_set_file_data(value);
  // @@protoc_insertion_point(field_set:UploadFileRequest.file_data)
}
inline std::string* UploadFileRequest::mutable_file_data() {
  // @@protoc_insertion_point(field_mutable:UploadFileRequest.file_data)
  return _internal_mutable_file_data();
}
inline const std::string& UploadFileRequest::_internal_file_data() const {
  return file_data_.Get();
}
inline void UploadFileRequest::_internal_set_file_data(const std::string& value) {
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadFileRequest::set_file_data(std::string&& value) {
  
  file_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UploadFileRequest.file_data)
}
inline void UploadFileRequest::set_file_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UploadFileRequest.file_data)
}
inline void UploadFileRequest::set_file_data(const void* value,
    size_t size) {
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UploadFileRequest.file_data)
}
inline std::string* UploadFileRequest::_internal_mutable_file_data() {
  
  return file_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadFileRequest::release_file_data() {
  // @@protoc_insertion_point(field_release:UploadFileRequest.file_data)
  return file_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadFileRequest::set_allocated_file_data(std::string* file_data) {
  if (file_data != nullptr) {
    
  } else {
    
  }
  file_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UploadFileRequest.file_data)
}

// -------------------------------------------------------------------

// UploadFileResponse

// -------------------------------------------------------------------

// DownloadFileRequest

// string file_name = 1;
inline void DownloadFileRequest::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& DownloadFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:DownloadFileRequest.file_name)
  return _internal_file_name();
}
inline void DownloadFileRequest::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:DownloadFileRequest.file_name)
}
inline std::string* DownloadFileRequest::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:DownloadFileRequest.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& DownloadFileRequest::_internal_file_name() const {
  return file_name_.Get();
}
inline void DownloadFileRequest::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DownloadFileRequest::set_file_name(std::string&& value) {
  
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DownloadFileRequest.file_name)
}
inline void DownloadFileRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DownloadFileRequest.file_name)
}
inline void DownloadFileRequest::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DownloadFileRequest.file_name)
}
inline std::string* DownloadFileRequest::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DownloadFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:DownloadFileRequest.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownloadFileRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DownloadFileRequest.file_name)
}

// -------------------------------------------------------------------

// DownloadFileResponse

// bytes file_data = 1;
inline void DownloadFileResponse::clear_file_data() {
  file_data_.ClearToEmpty();
}
inline const std::string& DownloadFileResponse::file_data() const {
  // @@protoc_insertion_point(field_get:DownloadFileResponse.file_data)
  return _internal_file_data();
}
inline void DownloadFileResponse::set_file_data(const std::string& value) {
  _internal_set_file_data(value);
  // @@protoc_insertion_point(field_set:DownloadFileResponse.file_data)
}
inline std::string* DownloadFileResponse::mutable_file_data() {
  // @@protoc_insertion_point(field_mutable:DownloadFileResponse.file_data)
  return _internal_mutable_file_data();
}
inline const std::string& DownloadFileResponse::_internal_file_data() const {
  return file_data_.Get();
}
inline void DownloadFileResponse::_internal_set_file_data(const std::string& value) {
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DownloadFileResponse::set_file_data(std::string&& value) {
  
  file_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DownloadFileResponse.file_data)
}
inline void DownloadFileResponse::set_file_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DownloadFileResponse.file_data)
}
inline void DownloadFileResponse::set_file_data(const void* value,
    size_t size) {
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DownloadFileResponse.file_data)
}
inline std::string* DownloadFileResponse::_internal_mutable_file_data() {
  
  return file_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DownloadFileResponse::release_file_data() {
  // @@protoc_insertion_point(field_release:DownloadFileResponse.file_data)
  return file_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownloadFileResponse::set_allocated_file_data(std::string* file_data) {
  if (file_data != nullptr) {
    
  } else {
    
  }
  file_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DownloadFileResponse.file_data)
}

// -------------------------------------------------------------------

// DeleteFileRequest

// string file_name = 1;
inline void DeleteFileRequest::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& DeleteFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:DeleteFileRequest.file_name)
  return _internal_file_name();
}
inline void DeleteFileRequest::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:DeleteFileRequest.file_name)
}
inline std::string* DeleteFileRequest::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:DeleteFileRequest.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& DeleteFileRequest::_internal_file_name() const {
  return file_name_.Get();
}
inline void DeleteFileRequest::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteFileRequest::set_file_name(std::string&& value) {
  
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeleteFileRequest.file_name)
}
inline void DeleteFileRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DeleteFileRequest.file_name)
}
inline void DeleteFileRequest::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeleteFileRequest.file_name)
}
inline std::string* DeleteFileRequest::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:DeleteFileRequest.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteFileRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeleteFileRequest.file_name)
}

// -------------------------------------------------------------------

// DeleteFileResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fsaving_5fmicroservice_2eproto
